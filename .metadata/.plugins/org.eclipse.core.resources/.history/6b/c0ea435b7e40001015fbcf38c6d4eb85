package api;

import java.io.IOException;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException; // Import JsonSyntaxException
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import model.DanhMuc;
import model.GiaoDich;
import model.LoginResponse;
import model.NguoiDung;
import model.NganSach;
import service.QuanLyChiTieuService;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Calendar; // Vẫn cần Calendar cho các phương thức khác, nhưng không dùng cho LocalDate

@WebServlet("/api/*")
public class QuanLyChiTieuServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private QuanLyChiTieuService service;
    private Gson gson;
    private static final String USER_ID_ATTRIBUTE = "userId";

    // Định nghĩa lớp POJO cho Login Request ở đây
    private static class LoginRequest {
        String email;
        String matkhau;
    }

    // Định nghĩa lớp POJO cho Change Password Request ở đây
     private static class ChangePasswordRequest {
         String oldPassword;
         String newPassword;
         
         public String getOldPassword() {
             return oldPassword;
         }
         
         public String getNewPassword() {
             return newPassword;
         }
     }
     
    // Định nghĩa lớp POJO cho Register Request ở đây
    private static class RegisterRequest {
        String email;
        String matkhau;
        String ten_hien_thi; // Tên hiển thị
        String role;
        
        public String getEmail() {
            return email;
        }
        
        public String getMatkhau() {
            return matkhau;
        }
        
        public String getTen_hien_thi() {
            return ten_hien_thi;
        }
        
        public String getRole() {
            return role;
        }
    }

    public QuanLyChiTieuServlet() {
        super();
        service = new QuanLyChiTieuService();
        // Cấu hình Gson để xử lý LocalDate
        GsonBuilder gsonBuilder = new GsonBuilder();
        // Đăng ký TypeAdapter cho LocalDate
        gsonBuilder.registerTypeAdapter(LocalDate.class, new LocalDateAdapter());
        gson = gsonBuilder.create();
    }

    // Type adapter cho LocalDate
    private static class LocalDateAdapter extends TypeAdapter<LocalDate> {
        private static final DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE;

        @Override
        public void write(JsonWriter out, LocalDate value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(value.format(formatter));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            if (in.peek() == com.google.gson.stream.JsonToken.NULL) {
                in.nextNull();
                return null;
            }
            return LocalDate.parse(in.nextString(), formatter);
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        if (pathInfo == null || pathInfo.equals("/")) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not specified\"}");
            return;
        }

        String[] pathParts = pathInfo.split("/");
        String resource = pathParts.length > 1 ? pathParts[1] : null;

        if ("categories".equals(resource)) {
            handleGetCategories(request, response, pathParts);
        } else if ("transactions".equals(resource)) {
        	// Đặt kiểm tra /api/transactions/search lên trước các đường dẫn transactions khác
            if (pathParts.length > 2 && "search".equals(pathParts[2])) {
                handleSearchTransactions(request, response);
            } else {
                handleGetTransactions(request, response, pathParts);
            }
        } else if ("budget".equals(resource)) {
             handleGetBudget(request, response, pathParts);
        } else if ("icons".equals(resource)) {
             handleGetIcons(request, response);
        } else if ("colors".equals(resource)) {
             handleGetColors(request, response);
        } else if ("transaction-types".equals(resource)) {
             handleGetTransactionTypes(request, response);
        } else if ("users".equals(resource) && pathParts.length > 2) {
             // Expecting /api/users/{id} hoặc /api/users/{id}/password
             try {
                 int userId = Integer.parseInt(pathParts[2]);
                 if (pathParts.length > 3 && "password".equals(pathParts[3])) {
                     // Handle change password
                     handleChangePassword(request, response, userId);
                 } else {
                     // Handle update user info
                      handleGetUserById(request, response, userId);
                 }
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid user ID\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
        } else {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not found\"}");
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        String pathInfo = request.getPathInfo();
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        if (pathInfo == null || pathInfo.equals("/")) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not specified\"}");
            return;
        }

        String[] pathParts = pathInfo.split("/");
        String endpoint = pathParts.length > 1 ? pathParts[1] : null;

        if ("login".equals(endpoint)) {
            handleLogin(request, response);
        } else if ("register".equals(endpoint)) {
            handleRegister(request, response);
        } else if ("categories".equals(endpoint)) {
             handlePostCategories(request, response);
         } else if ("transactions".equals(endpoint)) {
             handlePostTransactions(request, response);
         } else if ("budget".equals(endpoint)) {
             handlePostBudget(request, response);
         } else {
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);
             response.getWriter().write("{\"error\": \"Endpoint not found\"}");
         }
    }

    @Override
    protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        String pathInfo = request.getPathInfo();
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        if (pathInfo == null || pathInfo.equals("/")) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not specified\"}");
            return;
        }

        String[] pathParts = pathInfo.split("/");
        String resource = pathParts.length > 1 ? pathParts[1] : null;

        if ("categories".equals(resource) && pathParts.length > 2) {
            // Expecting /api/categories/{id}
            try {
                int categoryId = Integer.parseInt(pathParts[2]);
                handlePutCategories(request, response, categoryId);
            } catch (NumberFormatException e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"error\": \"Invalid category ID\"}");
            } catch (Exception e) {
                e.printStackTrace();
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Internal server error\"}");
            }
        } else if ("transactions".equals(resource) && pathParts.length > 2) {
             // Expecting /api/transactions/{id}
             try {
                 int transactionId = Integer.parseInt(pathParts[2]);
                 handlePutTransactions(request, response, transactionId);
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid transaction ID\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
         } else if ("budget".equals(resource) && pathParts.length > 2) {
              // Expecting /api/budget/{id}
             try {
                 int budgetId = Integer.parseInt(pathParts[2]);
                 handlePutBudget(request, response, budgetId);
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid budget ID\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
         } else if ("users".equals(resource) && pathParts.length > 2) {
              // Expecting /api/users/{id} hoặc /api/users/{id}/password
             try {
                 int userId = Integer.parseInt(pathParts[2]);
                 if (pathParts.length > 3 && "password".equals(pathParts[3])) {
                     // Handle change password
                     handleChangePassword(request, response, userId);
                 } else {
                     // Handle update user info
                      handleGetUserById(request, response, userId);
                 }
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid user ID\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
         } else {
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);
             response.getWriter().write("{\"error\": \"Endpoint not found or missing ID\"}");
         }
    }

    @Override
    protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String pathInfo = request.getPathInfo();
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        if (pathInfo == null || pathInfo.equals("/")) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not specified\"}");
            return;
        }

        String[] pathParts = pathInfo.split("/");
        String resource = pathParts.length > 1 ? pathParts[1] : null;

        if ("categories".equals(resource) && pathParts.length > 2) {
            // Expecting /api/categories/{id}
            try {
                int categoryId = Integer.parseInt(pathParts[2]);
                handleDeleteCategories(request, response, categoryId);
            } catch (NumberFormatException e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"error\": \"Invalid category ID\"}");
            } catch (Exception e) {
                e.printStackTrace();
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Internal server error\"}");
            }
        } else if ("transactions".equals(resource) && pathParts.length > 2) {
             // Expecting /api/transactions/{id}
             try {
                 int transactionId = Integer.parseInt(pathParts[2]);
                 handleDeleteTransactions(request, response, transactionId);
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid transaction ID\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
        } else if ("budget".equals(resource) && pathParts.length > 2) {
             // Expecting /api/budget/{id}
             try {
                 int budgetId = Integer.parseInt(pathParts[2]);
                 handleDeleteBudget(request, response, budgetId);
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid budget ID\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
        } else {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not found or missing ID\"}");
        }
    }

    private void handleGetCategories(HttpServletRequest request, HttpServletResponse response, String[] pathParts) throws IOException {
        // Expecting /api/categories/user/{userId}
        if (pathParts.length > 3 && "user".equals(pathParts[2])) {
            try {
                int requestedUserId = Integer.parseInt(pathParts[3]);
                 // Lấy userId từ request attribute (do AuthFilter đặt)
                Integer authenticatedUserId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);

                if (authenticatedUserId == null || authenticatedUserId != requestedUserId) {
                     // Người dùng yêu cầu danh mục của người khác hoặc không xác thực
                     response.setStatus(HttpServletResponse.SC_FORBIDDEN); // Hoặc SC_UNAUTHORIZED
                     response.getWriter().write("{\"error\": \"Forbidden - Cannot access other users' categories\"}");
                     return;
                }

                List<DanhMuc> categories = service.getDanhMucByUserId(requestedUserId);
                response.setStatus(HttpServletResponse.SC_OK);
                response.getWriter().write(gson.toJson(categories));
            } catch (NumberFormatException e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"error\": \"Invalid user ID\"}");
            } catch (Exception e) {
                e.printStackTrace();
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Internal server error\"}");
            }
        } else {
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);
             response.getWriter().write("{\"error\": \"Endpoint not found. Use /api/categories/user/{userId}\"}");
        }
    }

    private void handlePostCategories(HttpServletRequest request, HttpServletResponse response) throws IOException {
        // Lấy userId từ request attribute (do AuthFilter đặt)
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) { // Should not happen if AuthFilter works correctly
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        DanhMuc newDanhMuc = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            newDanhMuc = gson.fromJson(request.getReader(), DanhMuc.class);

            if (newDanhMuc == null || newDanhMuc.getTen_danh_muc() == null || newDanhMuc.getTen_danh_muc().isEmpty() || newDanhMuc.getId_icon() == 0 || newDanhMuc.getId_mau() == 0 || newDanhMuc.getId_loai() == 0) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"error\": \"Invalid category data\"}");
                return;
            }

            newDanhMuc.setId_nguoidung(userId); // Gán userId từ token (sử dụng Integer)

            boolean success = service.addDanhMuc(newDanhMuc);

            if (success) {
                response.setStatus(HttpServletResponse.SC_CREATED);
                response.getWriter().write("{\"message\": \"Category added successfully\"}");
            } else {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Failed to add category\"}");
            }
        } catch (JsonSyntaxException e) {
            System.err.println("Json Syntax Error during category parsing: " + e.getMessage());
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handlePutCategories(HttpServletRequest request, HttpServletResponse response, int categoryId) throws IOException {
        // Lấy userId từ request attribute (do AuthFilter đặt)
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) { // Should not happen if AuthFilter works correctly
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        DanhMuc updatedDanhMuc = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            updatedDanhMuc = gson.fromJson(request.getReader(), DanhMuc.class);

             if (updatedDanhMuc == null || updatedDanhMuc.getTen_danh_muc() == null || updatedDanhMuc.getTen_danh_muc().isEmpty() || updatedDanhMuc.getId_icon() == 0 || updatedDanhMuc.getId_mau() == 0 || updatedDanhMuc.getId_loai() == 0) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"error\": \"Invalid category data\"}");
                return;
            }

            updatedDanhMuc.setId_danhmuc(categoryId); // Gán categoryId từ URL
            updatedDanhMuc.setId_nguoidung(userId); // Đảm bảo userId đúng (sử dụng Integer)

            boolean success = service.updateDanhMuc(updatedDanhMuc);

            if (success) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.getWriter().write("{\"message\": \"Category updated successfully\"}");
            } else {
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND); // Hoặc SC_FORBIDDEN nếu không thuộc về user
                 response.getWriter().write("{\"error\": \"Category not found or does not belong to user\"}");
            }
        } catch (JsonSyntaxException e) {
            System.err.println("Json Syntax Error during category update parsing: " + e.getMessage());
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleDeleteCategories(HttpServletRequest request, HttpServletResponse response, int categoryId) throws IOException {
         // Lấy userId từ request attribute (do AuthFilter đặt)
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) { // Should not happen if AuthFilter works correctly
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        // Kiểm tra xem danh mục có thuộc về người dùng đang đăng nhập không
        DanhMuc categoryToDelete = service.getDanhMucByIdAndUserId(categoryId, userId); // Sử dụng phương thức mới

        if (categoryToDelete == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Category not found or does not belong to user\"}");
            return;
        }

        try {
            boolean success = service.deleteDanhMuc(categoryId);

            if (success) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.getWriter().write("{\"message\": \"Category deleted successfully\"}");
            } else {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Failed to delete category\"}");
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

     private void handleGetTransactions(HttpServletRequest request, HttpServletResponse response, String[] pathParts) throws IOException {
         // Expecting /api/transactions/user/{userId}/month/{month}/year/{year}
         if (pathParts.length > 5 && "user".equals(pathParts[2]) && "month".equals(pathParts[4]) && "year".equals(pathParts[6])) {
             try {
                 int requestedUserId = Integer.parseInt(pathParts[3]);
                 int month = Integer.parseInt(pathParts[5]);
                 int year = Integer.parseInt(pathParts[7]);

                 // Lấy userId từ request attribute (do AuthFilter đặt)
                 Integer authenticatedUserId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);

                 if (authenticatedUserId == null || authenticatedUserId != requestedUserId) {
                     // Người dùng yêu cầu giao dịch của người khác hoặc không xác thực
                     response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                     response.getWriter().write("{\"error\": \"Forbidden - Cannot access other users' transactions\"}");
                     return;
                 }

                 List<GiaoDich> transactions = service.getGiaoDichByMonth(requestedUserId, month, year);
                 response.setStatus(HttpServletResponse.SC_OK);
                 response.getWriter().write(gson.toJson(transactions));
             } catch (NumberFormatException e) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid user ID, month, or year\"}");
             } catch (Exception e) {
                 e.printStackTrace();
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                 response.getWriter().write("{\"error\": \"Internal server error\"}");
             }
         } else {
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);
             response.getWriter().write("{\"error\": \"Endpoint not found. Use /api/transactions/user/{userId}/month/{month}/year/{year}\"}");
         }
     }

     private void handlePostTransactions(HttpServletRequest request, HttpServletResponse response) throws IOException {
         // Lấy userId từ request attribute (do AuthFilter đặt)
         Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
         if (userId == null) { // Should not happen if AuthFilter works correctly
             response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
             response.getWriter().write("{\"error\": \"Unauthorized\"}");
             return;
         }

         StringBuilder sb = new StringBuilder();
         String line;
         while ((line = request.getReader().readLine()) != null) {
             sb.append(line);
         }
         String jsonRequest = sb.toString();

         // --- DEBUG LOG ---
         System.out.println("Received JSON Request Body in handlePostTransactions: " + jsonRequest);
         // -----------------

         GiaoDich newGiaoDich = null;
         try {
             newGiaoDich = gson.fromJson(jsonRequest, GiaoDich.class);

             if (newGiaoDich == null || newGiaoDich.getId_danhmuc() == null || newGiaoDich.getId_loai() == null || newGiaoDich.getSo_tien() <= 0) {
                  response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                  response.getWriter().write("{\"error\": \"Invalid transaction data\"}");
                  return;
             }

             newGiaoDich.setId_nguoidung(String.valueOf(userId)); // Gán userId từ token
             // Đảm bảo ngày, tháng, năm được thiết lập nếu cần (từ request hoặc hệ thống)
             // Logic xử lý ngày, tháng, năm đã được chuyển sang Service để tập trung
             // Nếu ngày không được cung cấp, Service sẽ sử dụng ngày hiện tại và thiết lập tháng/năm
             // Nếu ngày được cung cấp, Service sẽ trích xuất tháng/năm
             // Không cần xử lý logic này ở đây nữa.
             // Đảm bảo rằng trong Service, bạn đã xử lý đúng việc gán thang/nam từ ngay nếu ngay != null
             // và gán ngay = LocalDate.now() nếu ngay == null.

             // Log debug tạm thời trước khi gọi service
             System.out.println("Attempting to add transaction: " + newGiaoDich);
             boolean success = service.addGiaoDich(newGiaoDich);

             // --- DEBUG LOG SAU KHI GỌI SERVICE ---
             System.out.println("Result of addGiaoDich: " + success);
             // -----------------------------------

             if (success) {
                 response.setStatus(HttpServletResponse.SC_CREATED);
                 response.getWriter().write("{\"message\": \"Transaction added successfully\"}");
             } else {
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                  response.getWriter().write("{\"error\": \"Failed to add transaction\"}");
             }
         } catch (JsonSyntaxException e) {
             System.err.println("Json Syntax Error during transaction parsing: " + e.getMessage());
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
             response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
         } catch (Exception e) {
             e.printStackTrace();
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
             response.getWriter().write("{\"error\": \"Internal server error\"}");
         }
     }

     private void handlePutTransactions(HttpServletRequest request, HttpServletResponse response, int transactionId) throws IOException {
         // Lấy userId từ request attribute (do AuthFilter đặt)
         Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
         if (userId == null) { // Should not happen if AuthFilter works correctly
             response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
             response.getWriter().write("{\"error\": \"Unauthorized\"}");
             return;
         }

         GiaoDich updatedGiaoDich = null;
         try {
             // Đọc trực tiếp từ request reader vào Gson
             updatedGiaoDich = gson.fromJson(request.getReader(), GiaoDich.class);

             if (updatedGiaoDich == null || updatedGiaoDich.getId_danhmuc() == null || updatedGiaoDich.getId_loai() == null || updatedGiaoDich.getSo_tien() <= 0) {
                  response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                  response.getWriter().write("{\"error\": \"Invalid transaction data\"}");
                  return;
             }

             updatedGiaoDich.setId_GD(String.valueOf(transactionId));
             updatedGiaoDich.setId_nguoidung(String.valueOf(userId)); // Đảm bảo userId đúng
             // Cập nhật tháng/năm nếu ngày được cung cấp
              // Tương tự như POST, logic xử lý tháng/năm từ ngày nên ở Service
              // Đảm bảo Service xử lý cập nhật tháng/năm khi ngày được cung cấp.

             // Log debug tạm thời trước khi gọi service
             System.out.println("Attempting to update transaction: " + updatedGiaoDich);
             boolean success = service.updateGiaoDich(updatedGiaoDich);

             // --- DEBUG LOG SAU KHI GỌI SERVICE ---
             System.out.println("Result of updateGiaoDich: " + success);
             // -------------------------------------

             if (success) {
                 response.setStatus(HttpServletResponse.SC_OK);
                 response.getWriter().write("{\"message\": \"Transaction updated successfully\"}");
             } else {
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND); // Hoặc SC_FORBIDDEN nếu không thuộc về user
                  response.getWriter().write("{\"error\": \"Transaction not found or update failed\"}");
             }
         } catch (JsonSyntaxException e) {
             System.err.println("Json Syntax Error during transaction update parsing: " + e.getMessage());
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
             response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
         } catch (Exception e) {
             e.printStackTrace();
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
             response.getWriter().write("{\"error\": \"Internal server error\"}");
         }
     }

     private void handleDeleteTransactions(HttpServletRequest request, HttpServletResponse response, int transactionId) throws IOException {
         // Lấy userId từ request attribute (do AuthFilter đặt)
         Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
         if (userId == null) { // Should not happen if AuthFilter works correctly
             response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
             response.getWriter().write("{\"error\": \"Unauthorized\"}");
             return;
         }

         // Kiểm tra xem giao dịch có thuộc về người dùng đang đăng nhập không trước khi xóa
         GiaoDich transactionToDelete = service.getGiaoDichByIdAndUserId(transactionId, userId); // Sử dụng phương thức mới

         if (transactionToDelete == null) {
             response.setStatus(HttpServletResponse.SC_NOT_FOUND);
             response.getWriter().write("{\"error\": \"Transaction not found or does not belong to user\"}");
             return;
         }

         try {
             boolean success = service.deleteGiaoDich(transactionId);

             if (success) {
                 response.setStatus(HttpServletResponse.SC_OK);
                 response.getWriter().write("{\"message\": \"Transaction deleted successfully\"}");
             } else {
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                  response.getWriter().write("{\"error\": \"Failed to delete transaction\"}");
             }
         } catch (Exception e) {
             e.printStackTrace();
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
             response.getWriter().write("{\"error\": \"Internal server error\"}");
         }
     }

    private void handleLogin(HttpServletRequest request, HttpServletResponse response) throws IOException {
        LoginRequest loginRequest = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            loginRequest = gson.fromJson(request.getReader(), LoginRequest.class);

            System.out.println("LoginRequest object after gson.fromJson: " + loginRequest); // Giữ lại debug log
            if (loginRequest != null) {
                 System.out.println("Email: " + (loginRequest.email != null ? loginRequest.email : "null") + ", Password: " + (loginRequest.matkhau != null ? "masked" : "null")); // Log password cẩn thận
            }

            // Kiểm tra xem loginRequest có null không hoặc các trường cần thiết có null không
            if (loginRequest == null || loginRequest.email == null || loginRequest.email.isEmpty() || loginRequest.matkhau == null || loginRequest.matkhau.isEmpty()) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST); // 400 Bad Request
                response.getWriter().write("{\"error\": \"Email and password are required\"}");
                return; // Thoát khỏi phương thức
            }

            // Gọi service để xác thực người dùng
            LoginResponse loginResponse = service.login(loginRequest.email, loginRequest.matkhau);

            // Xử lý kết quả từ service
            if (loginResponse != null && loginResponse.getToken() != null) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.setContentType("application/json");
                response.getWriter().write(gson.toJson(loginResponse));
            } else {
                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // 401 Unauthorized
                response.getWriter().write("{\"error\": \"Invalid email or password\"}");
            }
        } catch (JsonSyntaxException e) {
            // Bắt ngoại lệ nếu JSON không hợp lệ
             System.err.println("Json Syntax Error during login parsing: " + e.getMessage());
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST); // 400 Bad Request
             response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
             // Bắt các lỗi khác trong quá trình đọc/parse
             e.printStackTrace();
             response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
             response.getWriter().write("{\"error\": \"Internal server error during login\"}");
        }
    }
    
    private void handleRegister(HttpServletRequest request, HttpServletResponse response) throws IOException {
        RegisterRequest registerRequest = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            registerRequest = gson.fromJson(request.getReader(), RegisterRequest.class);

            if (registerRequest == null || registerRequest.getEmail() == null || registerRequest.getEmail().isEmpty() || registerRequest.getMatkhau() == null || registerRequest.getMatkhau().isEmpty()) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST); // 400 Bad Request
                response.getWriter().write("{\"error\": \"Email and password are required\"}");
                return;
            }

            // Việc kiểm tra email đã tồn tại được xử lý trong Service.register
            NguoiDung newUser = new NguoiDung();
            newUser.setEmail(registerRequest.getEmail());
            newUser.setMatkhau(registerRequest.getMatkhau()); // Mật khẩu sẽ được mã hóa trong Service
            // Gán tên mặc định nếu không được cung cấp
            if (registerRequest.getTen_hien_thi() != null && !registerRequest.getTen_hien_thi().isEmpty()) {
                newUser.setHoten(registerRequest.getTen_hien_thi());
            } else {
                newUser.setHoten("Người dùng mới"); // Tên mặc định
            }
            // Gán role mặc định nếu không được cung cấp hoặc không hợp lệ
             if (registerRequest.getRole() != null && (registerRequest.getRole().equals("user") || registerRequest.getRole().equals("admin"))) {
                 newUser.setRole(registerRequest.getRole());
             } else {
                 newUser.setRole("user"); // Role mặc định
             }

            boolean success = service.register(newUser);

            if (success) {
                // Đăng ký thành công, có thể trả về thông báo hoặc tự động đăng nhập và trả về token
                 response.setStatus(HttpServletResponse.SC_CREATED); // 201 Created
                 response.getWriter().write("{\"message\": \"Registration successful\"}");
            } else {
                // Nếu Service.register trả về false (ví dụ: email đã tồn tại), trả về 409 Conflict
                response.setStatus(HttpServletResponse.SC_CONFLICT); // 409 Conflict
                response.getWriter().write("{\"error\": \"Registration failed - Email may already exist\"}");
            }
        }  catch (JsonSyntaxException e) {
             System.err.println("Json Syntax Error during register parsing: " + e.getMessage());
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST); // 400 Bad Request
             response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // 500 Internal Server Error
            response.getWriter().write("{\"error\": \"An error occurred during registration\"}");
        }
    }

    private void handleGetBudget(HttpServletRequest request, HttpServletResponse response, String[] pathParts) throws IOException {
        // Expecting /api/budget/user/{userId}/month/{month}/year/{year}
        if (pathParts.length > 5 && "user".equals(pathParts[2]) && "month".equals(pathParts[4]) && "year".equals(pathParts[6])) {
            try {
                int requestedUserId = Integer.parseInt(pathParts[3]);
                int month = Integer.parseInt(pathParts[5]);
                int year = Integer.parseInt(pathParts[7]);

                // Lấy userId từ request attribute (do AuthFilter đặt)
                Integer authenticatedUserId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);

                if (authenticatedUserId == null || authenticatedUserId != requestedUserId) {
                    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
                    response.getWriter().write("{\"error\": \"Forbidden - Cannot access other users' budget\"}");
                    return;
                }

                NganSach budget = service.getNganSachByMonth(requestedUserId, month, year);
                if (budget != null) {
                    response.setStatus(HttpServletResponse.SC_OK);
                    response.getWriter().write(gson.toJson(budget));
                } else {
                    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                    response.getWriter().write("{\"message\": \"Budget not found for this period\"}");
                }
            } catch (NumberFormatException e) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"error\": \"Invalid user ID, month, or year\"}");
            } catch (Exception e) {
                e.printStackTrace();
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Internal server error\"}");
            }
        } else {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Endpoint not found. Use /api/budget/user/{userId}/month/{month}/year/{year}\"}");
        }
    }

    private void handlePostBudget(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        NganSach newNganSach = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            newNganSach = gson.fromJson(request.getReader(), NganSach.class);

            if (newNganSach == null || newNganSach.getNgansach() <= 0 || newNganSach.getThang() == 0 || newNganSach.getNam() == 0) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid budget data\"}");
                 return;
            }

            newNganSach.setId_nguoidung(userId); // Gán userId từ token (sử dụng Integer)

             // Kiểm tra trùng ngân sách cho tháng/năm của người dùng
            if (service.isNganSachExistForMonthYear(userId, newNganSach.getThang(), newNganSach.getNam())) {
                 response.setStatus(HttpServletResponse.SC_CONFLICT); // 409 Conflict
                 response.getWriter().write("{\"error\": \"Budget for this month and year already exists\"}");
                 return;
            }

            boolean success = service.addNganSach(newNganSach);

            if (success) {
                response.setStatus(HttpServletResponse.SC_CREATED);
                response.getWriter().write("{\"message\": \"Budget added successfully\"}");
            } else {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Failed to add budget\"}");
            }
        } catch (JsonSyntaxException e) {
             System.err.println("Json Syntax Error during budget parsing: " + e.getMessage());
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
             response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handlePutBudget(HttpServletRequest request, HttpServletResponse response, int budgetId) throws IOException {
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        NganSach updatedNganSach = null;
        try {
             // Đọc trực tiếp từ request reader vào Gson
             updatedNganSach = gson.fromJson(request.getReader(), NganSach.class);

             if (updatedNganSach == null || updatedNganSach.getNgansach() <= 0 || updatedNganSach.getThang() == 0 || updatedNganSach.getNam() == 0) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid budget data\"}");
                 return;
            }

            updatedNganSach.setId_ngansach(budgetId); // Gán budgetId từ URL
            updatedNganSach.setId_nguoidung(userId); // Đảm bảo userId đúng (sử dụng Integer)

            // Log debug tạm thời trước khi gọi service
            System.out.println("Attempting to update budget: " + updatedNganSach);
            boolean success = service.updateNganSach(updatedNganSach);

            // --- DEBUG LOG SAU KHI GỌI SERVICE ---
            System.out.println("Result of updateNganSach: " + success);
            // -------------------------------------

            if (success) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.getWriter().write("{\"message\": \"Budget updated successfully\"}");
            } else {
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND); // Hoặc SC_FORBIDDEN nếu không thuộc về user
                 response.getWriter().write("{\"error\": \"Budget not found or does not belong to user\"}");
            }
        } catch (JsonSyntaxException e) {
            System.err.println("Json Syntax Error during budget update parsing: " + e.getMessage());
             response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
             response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleDeleteBudget(HttpServletRequest request, HttpServletResponse response, int budgetId) throws IOException {
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        // Kiểm tra xem ngân sách có thuộc về người dùng đang đăng nhập không trước khi xóa
        NganSach budgetToDelete = service.getNganSachByIdAndUserId(budgetId, userId);

        if (budgetToDelete == null) {
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            response.getWriter().write("{\"error\": \"Budget not found or does not belong to user\"}");
            return;
        }

        try {
            boolean success = service.deleteNganSach(budgetId);

            if (success) {
                response.setStatus(HttpServletResponse.SC_OK);
                response.getWriter().write("{\"message\": \"Budget deleted successfully\"}");
            } else {
                response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                response.getWriter().write("{\"error\": \"Failed to delete budget\"}");
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleGetIcons(HttpServletRequest request, HttpServletResponse response) throws IOException {
        try {
            List<model.Icon> icons = service.getAllIcon();
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().write(gson.toJson(icons));
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleGetColors(HttpServletRequest request, HttpServletResponse response) throws IOException {
        try {
            List<model.MauSac> colors = service.getAllMauSac();
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().write(gson.toJson(colors));
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleGetTransactionTypes(HttpServletRequest request, HttpServletResponse response) throws IOException {
        try {
            List<model.LoaiGiaoDich> transactionTypes = service.getAllLoaiGiaoDich();
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().write(gson.toJson(transactionTypes));
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handlePutUser(HttpServletRequest request, HttpServletResponse response, int requestedUserId) throws IOException {
        Integer authenticatedUserId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (authenticatedUserId == null || !authenticatedUserId.equals(requestedUserId)) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN); // 403 Forbidden
            response.getWriter().write("{\"error\": \"You are not authorized to update this user\"}");
            return;
        }

        NguoiDung updatedUser = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            updatedUser = gson.fromJson(request.getReader(), NguoiDung.class);

             if (updatedUser == null || updatedUser.getHoten() == null || updatedUser.getHoten().isEmpty() || updatedUser.getEmail() == null || updatedUser.getEmail().isEmpty()) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Invalid user data\"}");
                 return;
            }

            updatedUser.setId_nguoidung(requestedUserId); // Gán ID từ URL
            // Không cho phép cập nhật mật khẩu và role qua endpoint này
            updatedUser.setMatkhau(null); // Đảm bảo mật khẩu không bị cập nhật
            updatedUser.setRole(null); // Đảm bảo role không bị cập nhật

             // Kiểm tra trùng email khi cập nhật
            if (service.isEmailExistsExcludingId(updatedUser.getEmail(), requestedUserId)) {
                 response.setStatus(HttpServletResponse.SC_CONFLICT); // 409 Conflict
                 response.getWriter().write("{\"error\": \"Email already exists\"}");
                 return;
            }

            // Log debug tạm thời trước khi gọi service
            System.out.println("Attempting to update user: " + updatedUser);
            boolean success = service.updateUser(updatedUser);

            // --- DEBUG LOG SAU KHI GỌI SERVICE ---
            System.out.println("Result of updateUser: " + success);
            // -------------------------------------

            if (success) {
                 response.setStatus(HttpServletResponse.SC_OK);
                 response.getWriter().write("{\"message\": \"User updated successfully\"}");
            } else {
                 // Service sẽ trả về false nếu user không tồn tại hoặc email trùng
                 // Cần refine phản hồi tùy theo lý do thất bại (user not found vs email exists)
                 response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // Hoặc SC_CONFLICT nếu email trùng
                 response.getWriter().write("{\"error\": \"Failed to update user\"}");
            }
        } catch (JsonSyntaxException e) {
            System.err.println("Json Syntax Error during user update parsing: " + e.getMessage());
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleGetUserById(HttpServletRequest request, HttpServletResponse response, int requestedUserId) throws IOException {
        Integer authenticatedUserId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (authenticatedUserId == null || !authenticatedUserId.equals(requestedUserId)) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN); // 403 Forbidden
            response.getWriter().write("{\"error\": \"You are not authorized to view this user\"}");
            return;
        }

        try {
            NguoiDung user = service.getUserById(requestedUserId);
            if (user != null) {
                 // Lưu ý: Không trả về mật khẩu trong response
                 user.setMatkhau(null); // Xóa mật khẩu trước khi gửi về client
                 response.setStatus(HttpServletResponse.SC_OK);
                 response.getWriter().write(gson.toJson(user));
            } else {
                 response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                 response.getWriter().write("{\"error\": \"User not found\"}");
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleChangePassword(HttpServletRequest request, HttpServletResponse response, int requestedUserId) throws IOException {
        Integer authenticatedUserId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (authenticatedUserId == null || !authenticatedUserId.equals(requestedUserId)) {
            response.setStatus(HttpServletResponse.SC_FORBIDDEN); // 403 Forbidden
            response.getWriter().write("{\"error\": \"You are not authorized to change password for this user\"}");
            return;
        }

        ChangePasswordRequest passwordRequest = null;
        try {
            // Đọc trực tiếp từ request reader vào Gson
            passwordRequest = gson.fromJson(request.getReader(), ChangePasswordRequest.class);

             if (passwordRequest == null || passwordRequest.getOldPassword() == null || passwordRequest.getOldPassword().isEmpty() || passwordRequest.getNewPassword() == null || passwordRequest.getNewPassword().isEmpty()) {
                 response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                 response.getWriter().write("{\"error\": \"Old password and new password are required\"}");
                 return;
            }

             // Gọi service để đổi mật khẩu
            boolean success = service.changePassword(requestedUserId, passwordRequest.getOldPassword(), passwordRequest.getNewPassword());

            if (success) {
                 response.setStatus(HttpServletResponse.SC_OK);
                 response.getWriter().write("{\"message\": \"Password changed successfully\"}");
            } else {
                 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED); // Hoặc SC_FORBIDDEN nếu mật khẩu cũ sai
                 response.getWriter().write("{\"error\": \"Failed to change password - Incorrect old password or user not found\"}");
            }
        } catch (JsonSyntaxException e) {
            System.err.println("Json Syntax Error during password change parsing: " + e.getMessage());
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Invalid JSON format\"}");
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    private void handleSearchTransactions(HttpServletRequest request, HttpServletResponse response) throws IOException {
        Integer userId = (Integer) request.getAttribute(USER_ID_ATTRIBUTE);
        if (userId == null) {
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.getWriter().write("{\"error\": \"Unauthorized\"}");
            return;
        }

        String keyword = request.getParameter("keyword");
        if (keyword == null || keyword.trim().isEmpty()) {
            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
            response.getWriter().write("{\"error\": \"Missing or empty keyword parameter\"}");
            return;
        }

        try {
            List<model.GiaoDich> searchResults = service.searchTransactionsByKeyword(userId, keyword);
            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().write(gson.toJson(searchResults));
        } catch (Exception e) {
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\": \"Internal server error\"}");
        }
    }

    // Thêm các phương thức doGet, doPut, doDelete cho các loại request khác nếu cần
} 